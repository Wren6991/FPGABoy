/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

// Block name           : gpio
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

module gpio_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg  out_led_o,
	output reg  dir_led_o,
	input wire  in_led_i,
	input wire  in_dpad_u_i,
	input wire  in_dpad_d_i,
	input wire  in_dpad_l_i,
	input wire  in_dpad_r_i,
	input wire  in_btn_a_i,
	input wire  in_btn_b_i,
	input wire  in_btn_x_i,
	input wire  in_btn_y_i,
	input wire  in_btn_start_i,
	input wire  in_btn_select_i
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'hc;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_OUT = 0;
localparam ADDR_DIR = 4;
localparam ADDR_IN = 8;

wire __out_wen = wen && addr == ADDR_OUT;
wire __out_ren = ren && addr == ADDR_OUT;
wire __dir_wen = wen && addr == ADDR_DIR;
wire __dir_ren = ren && addr == ADDR_DIR;
wire __in_wen = wen && addr == ADDR_IN;
wire __in_ren = ren && addr == ADDR_IN;

wire  out_led_wdata = wdata[0];
wire  out_led_rdata;
wire [31:0] __out_rdata = {31'h0, out_led_rdata};
assign out_led_rdata = out_led_o;

wire  dir_led_wdata = wdata[0];
wire  dir_led_rdata;
wire [31:0] __dir_rdata = {31'h0, dir_led_rdata};
assign dir_led_rdata = dir_led_o;

wire  in_led_wdata = wdata[0];
wire  in_led_rdata;
wire  in_dpad_u_wdata = wdata[1];
wire  in_dpad_u_rdata;
wire  in_dpad_d_wdata = wdata[2];
wire  in_dpad_d_rdata;
wire  in_dpad_l_wdata = wdata[3];
wire  in_dpad_l_rdata;
wire  in_dpad_r_wdata = wdata[4];
wire  in_dpad_r_rdata;
wire  in_btn_a_wdata = wdata[5];
wire  in_btn_a_rdata;
wire  in_btn_b_wdata = wdata[6];
wire  in_btn_b_rdata;
wire  in_btn_x_wdata = wdata[7];
wire  in_btn_x_rdata;
wire  in_btn_y_wdata = wdata[8];
wire  in_btn_y_rdata;
wire  in_btn_start_wdata = wdata[9];
wire  in_btn_start_rdata;
wire  in_btn_select_wdata = wdata[10];
wire  in_btn_select_rdata;
wire [31:0] __in_rdata = {21'h0, in_btn_select_rdata, in_btn_start_rdata, in_btn_y_rdata, in_btn_x_rdata, in_btn_b_rdata, in_btn_a_rdata, in_dpad_r_rdata, in_dpad_l_rdata, in_dpad_d_rdata, in_dpad_u_rdata, in_led_rdata};
assign in_led_rdata = in_led_i;
assign in_dpad_u_rdata = in_dpad_u_i;
assign in_dpad_d_rdata = in_dpad_d_i;
assign in_dpad_l_rdata = in_dpad_l_i;
assign in_dpad_r_rdata = in_dpad_r_i;
assign in_btn_a_rdata = in_btn_a_i;
assign in_btn_b_rdata = in_btn_b_i;
assign in_btn_x_rdata = in_btn_x_i;
assign in_btn_y_rdata = in_btn_y_i;
assign in_btn_start_rdata = in_btn_start_i;
assign in_btn_select_rdata = in_btn_select_i;

always @ (*) begin
	case (addr)
		ADDR_OUT: rdata = __out_rdata;
		ADDR_DIR: rdata = __dir_rdata;
		ADDR_IN: rdata = __in_rdata;
		default: rdata = 32'h0;
	endcase
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		out_led_o <= 1'h0;
		dir_led_o <= 1'h0;
	end else begin
		if (__out_wen)
			out_led_o <= out_led_wdata;
		if (__dir_wen)
			dir_led_o <= dir_led_wdata;
	end
end

endmodule
