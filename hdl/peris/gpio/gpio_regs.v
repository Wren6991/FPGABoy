/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

// Block name           : gpio
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

module gpio_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg [10:0] out_o,
	output reg [10:0] dir_o,
	input wire [10:0] in_i
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'hc;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_OUT = 0;
localparam ADDR_DIR = 4;
localparam ADDR_IN = 8;

wire __out_wen = wen && addr == ADDR_OUT;
wire __out_ren = ren && addr == ADDR_OUT;
wire __dir_wen = wen && addr == ADDR_DIR;
wire __dir_ren = ren && addr == ADDR_DIR;
wire __in_wen = wen && addr == ADDR_IN;
wire __in_ren = ren && addr == ADDR_IN;

wire [10:0] out_wdata = wdata[10:0];
wire [10:0] out_rdata;
wire [31:0] __out_rdata = {21'h0, out_rdata};
assign out_rdata = out_o;

wire [10:0] dir_wdata = wdata[10:0];
wire [10:0] dir_rdata;
wire [31:0] __dir_rdata = {21'h0, dir_rdata};
assign dir_rdata = dir_o;

wire [10:0] in_wdata = wdata[10:0];
wire [10:0] in_rdata;
wire [31:0] __in_rdata = {21'h0, in_rdata};
assign in_rdata = in_i;

always @ (*) begin
	case (addr)
		ADDR_OUT: rdata = __out_rdata;
		ADDR_DIR: rdata = __dir_rdata;
		ADDR_IN: rdata = __in_rdata;
		default: rdata = 32'h0;
	endcase
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		out_o <= 11'h0;
		dir_o <= 11'h0;
	end else begin
		if (__out_wen)
			out_o <= out_wdata;
		if (__dir_wen)
			dir_o <= dir_wdata;
	end
end

endmodule
